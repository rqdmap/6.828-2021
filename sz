kernel/exec.c:  uint64 oldsz = p->sz;
kernel/exec.c:  p->trapframe->a1 = sp;
kernel/exec.c:  safestrcpy(p->name, last, sizeof(p->name));
kernel/exec.c:  oldpagetable = p->pagetable;
kernel/exec.c:  p->pagetable = pagetable;
kernel/exec.c:  p->sz = sz;
kernel/exec.c:  p->trapframe->epc = elf.entry;  // initial program counter = main
kernel/exec.c:  p->trapframe->sp = sp; // initial stack pointer
kernel/file.c:    if(copyout(p->pagetable, addr, (char *)&st, sizeof(st)) < 0)
kernel/fs.c:  memmove(sb, bp->data, sizeof(*sb));
kernel/fs.c:  memset(bp->data, 0, BSIZE);
kernel/fs.c:      if((bp->data[bi/8] & m) == 0){  // Is block free?
kernel/fs.c:        bp->data[bi/8] |= m;  // Mark block in use.
kernel/fs.c:  if((bp->data[bi/8] & m) == 0)
kernel/fs.c:  bp->data[bi/8] &= ~m;
kernel/fs.c:// not stored on disk: ip->ref and ip->valid.
kernel/fs.c://   is free if ip->ref is zero. Otherwise ip->ref tracks
kernel/fs.c://   table entry is only correct when ip->valid is 1.
kernel/fs.c://   the disk and sets ip->valid, while iput() clears
kernel/fs.c://   ip->valid if ip->ref has fallen to zero.
kernel/fs.c://   ... examine and modify ip->xxx ...
kernel/fs.c:// pathname lookup. iget() increments ip->ref so that the inode
kernel/fs.c:// entries. Since ip->ref indicates whether an entry is free,
kernel/fs.c:// and ip->dev and ip->inum indicate which i-node an entry
kernel/fs.c:// An ip->lock sleep-lock protects all ip-> fields other than ref,
kernel/fs.c:// dev, and inum.  One must hold ip->lock in order to
kernel/fs.c:// read or write that inode's ip->valid, ip->size, ip->type, &c.
kernel/fs.c:    dip = (struct dinode*)bp->data + inum%IPB;
kernel/fs.c:    if(dip->type == 0){  // a free inode
kernel/fs.c:      dip->type = type;
kernel/fs.c:// Must be called after every change to an ip->xxx field
kernel/fs.c:// Caller must hold ip->lock.
kernel/fs.c:  bp = bread(ip->dev, IBLOCK(ip->inum, sb));
kernel/fs.c:  dip = (struct dinode*)bp->data + ip->inum%IPB;
kernel/fs.c:  dip->type = ip->type;
kernel/fs.c:  dip->major = ip->major;
kernel/fs.c:  dip->minor = ip->minor;
kernel/fs.c:  dip->nlink = ip->nlink;
kernel/fs.c:  dip->size = ip->size;
kernel/fs.c:  memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
kernel/fs.c:    if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
kernel/fs.c:      ip->ref++;
kernel/fs.c:    if(empty == 0 && ip->ref == 0)    // Remember empty slot.
kernel/fs.c:  ip->dev = dev;
kernel/fs.c:  ip->inum = inum;
kernel/fs.c:  ip->ref = 1;
kernel/fs.c:  ip->valid = 0;
kernel/fs.c:  ip->ref++;
kernel/fs.c:  if(ip == 0 || ip->ref < 1)
kernel/fs.c:  acquiresleep(&ip->lock);
kernel/fs.c:  if(ip->valid == 0){
kernel/fs.c:    bp = bread(ip->dev, IBLOCK(ip->inum, sb));
kernel/fs.c:    dip = (struct dinode*)bp->data + ip->inum%IPB;
kernel/fs.c:    ip->type = dip->type;
kernel/fs.c:    ip->major = dip->major;
kernel/fs.c:    ip->minor = dip->minor;
kernel/fs.c:    ip->nlink = dip->nlink;
kernel/fs.c:    ip->size = dip->size;
kernel/fs.c:    memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
kernel/fs.c:    ip->valid = 1;
kernel/fs.c:    if(ip->type == 0)
kernel/fs.c:  if(ip == 0 || !holdingsleep(&ip->lock) || ip->ref < 1)
kernel/fs.c:  releasesleep(&ip->lock);
kernel/fs.c:  if(ip->ref == 1 && ip->valid && ip->nlink == 0){
kernel/fs.c:    // ip->ref == 1 means no other process can have ip locked,
kernel/fs.c:    acquiresleep(&ip->lock);
kernel/fs.c:    ip->type = 0;
kernel/fs.c:    ip->valid = 0;
kernel/fs.c:    releasesleep(&ip->lock);
kernel/fs.c:  ip->ref--;
kernel/fs.c:// are listed in ip->addrs[].  The next NINDIRECT blocks are
kernel/fs.c:// listed in block ip->addrs[NDIRECT].
kernel/fs.c:    if((addr = ip->addrs[bn]) == 0)
kernel/fs.c:      ip->addrs[bn] = addr = balloc(ip->dev);
kernel/fs.c:    if((addr = ip->addrs[NDIRECT]) == 0)
kernel/fs.c:      ip->addrs[NDIRECT] = addr = balloc(ip->dev);
kernel/fs.c:    bp = bread(ip->dev, addr);
kernel/fs.c:    a = (uint*)bp->data;
kernel/fs.c:      a[bn] = addr = balloc(ip->dev);
kernel/fs.c:// Caller must hold ip->lock.
kernel/fs.c:    if(ip->addrs[i]){
kernel/fs.c:      bfree(ip->dev, ip->addrs[i]);
kernel/fs.c:      ip->addrs[i] = 0;
kernel/fs.c:  if(ip->addrs[NDIRECT]){
kernel/fs.c:    bp = bread(ip->dev, ip->addrs[NDIRECT]);
kernel/fs.c:    a = (uint*)bp->data;
kernel/fs.c:        bfree(ip->dev, a[j]);
kernel/fs.c:    bfree(ip->dev, ip->addrs[NDIRECT]);
kernel/fs.c:    ip->addrs[NDIRECT] = 0;
kernel/fs.c:  ip->size = 0;
kernel/fs.c:// Caller must hold ip->lock.
kernel/fs.c:  st->dev = ip->dev;
kernel/fs.c:  st->ino = ip->inum;
kernel/fs.c:  st->type = ip->type;
kernel/fs.c:  st->nlink = ip->nlink;
kernel/fs.c:  st->size = ip->size;
kernel/fs.c:// Caller must hold ip->lock.
kernel/fs.c:  if(off > ip->size || off + n < off)
kernel/fs.c:  if(off + n > ip->size)
kernel/fs.c:    n = ip->size - off;
kernel/fs.c:    bp = bread(ip->dev, bmap(ip, off/BSIZE));
kernel/fs.c:    if(either_copyout(user_dst, dst, bp->data + (off % BSIZE), m) == -1) {
kernel/fs.c:// Caller must hold ip->lock.
kernel/fs.c:  if(off > ip->size || off + n < off)
kernel/fs.c:    bp = bread(ip->dev, bmap(ip, off/BSIZE));
kernel/fs.c:    if(either_copyin(bp->data + (off % BSIZE), user_src, src, m) == -1) {
kernel/fs.c:  if(off > ip->size)
kernel/fs.c:    ip->size = off;
kernel/fs.c:  // block to ip->addrs[].
kernel/fs.c:  if(dp->type != T_DIR)
kernel/fs.c:  for(off = 0; off < dp->size; off += sizeof(de)){
kernel/fs.c:      return iget(dp->dev, inum);
kernel/fs.c:  for(off = 0; off < dp->size; off += sizeof(de)){
kernel/fs.c:    if(ip->type != T_DIR){
kernel/kernel.asm:  ilock(fp->ip);
kernel/kernel.asm:  if((tot = readi(fp->ip, 0, (uint64)mem, PGROUNDDOWN(va) - mi->addr, PGSIZE)) < 0)
kernel/kernel.asm:  iunlock(fp->ip);
kernel/kernel.asm:  pagetable = p->pagetable;
kernel/kernel.asm:  for(int i = 0; i < NOFILE; i++) if(p->mmapInfo[i].length == 0){
kernel/kernel.asm:    mi = &p->mmapInfo[i];
kernel/kernel.asm:  for(int i = 0; i < NOFILE; i++) if(p->mmapInfo[i].length == 0){
kernel/kernel.asm:  mi->fp = p->ofile[fd];
kernel/kernel.asm:  if(!mi->fp->readable && prot & PROT_READ)
kernel/kernel.asm:  if(!mi->fp->writable && prot & PROT_WRITE && mi->flags & MAP_SHARED)
kernel/kernel.asm:  oldsz = PGROUNDUP(p->sz);
kernel/kernel.asm:  p->sz = oldsz + length;
kernel/kernel.asm:  filedup(p->ofile[fd]);
kernel/kernel.asm:      if(write_back(mi->fp->ip, va, va - mi->addr + mi->offset) < 0)
kernel/kernel.asm:  pagetable = p->pagetable;
kernel/kernel.asm:    if(p->mmapInfo[i].addr <= addr && addr < p->mmapInfo[i].addr + p->mmapInfo[i].length){
kernel/kernel.asm:  mi = &p->mmapInfo[fd];
kernel/kernel.asm:      initlock(&p->lock, "proc");
kernel/kernel.asm:      p->kstack = KSTACK((int) (p - proc));
kernel/kernel.asm:// and return with p->lock held.
kernel/kernel.asm:    acquire(&p->lock);
kernel/kernel.asm:    if(p->state == UNUSED) {
kernel/kernel.asm:      release(&p->lock);
kernel/kernel.asm:  p->pid = allocpid();
kernel/kernel.asm:  p->state = USED;
kernel/kernel.asm:  if((p->trapframe = (struct trapframe *)kalloc()) == 0){
kernel/kernel.asm:    release(&p->lock);
kernel/kernel.asm:  p->pagetable = proc_pagetable(p);
kernel/kernel.asm:  if(p->pagetable == 0){
kernel/kernel.asm:    release(&p->lock);
kernel/kernel.asm:  memset(&p->context, 0, sizeof(p->context));
kernel/kernel.asm:  p->context.ra = (uint64)forkret;
kernel/kernel.asm:  p->context.sp = p->kstack + PGSIZE;
kernel/kernel.asm:  memset(p->mmapInfo, 0, sizeof(p->mmapInfo));
kernel/kernel.asm:// p->lock must be held.
kernel/kernel.asm:  if(p->trapframe)
kernel/kernel.asm:    kfree((void*)p->trapframe);
kernel/kernel.asm:  p->trapframe = 0;
kernel/kernel.asm:  if(p->pagetable)
kernel/kernel.asm:    proc_freepagetable(p->pagetable, p->sz);
kernel/kernel.asm:  p->pagetable = 0;
kernel/kernel.asm:  p->sz = 0;
kernel/kernel.asm:  p->pid = 0;
kernel/kernel.asm:  p->parent = 0;
kernel/kernel.asm:  p->name[0] = 0;
kernel/kernel.asm:  p->chan = 0;
kernel/kernel.asm:  p->killed = 0;
kernel/kernel.asm:  p->xstate = 0;
kernel/kernel.asm:  p->state = UNUSED;
kernel/kernel.asm:  memset(p->mmapInfo, 0, sizeof(p->mmapInfo));
kernel/kernel.asm:              (uint64)(p->trapframe), PTE_R | PTE_W) < 0){
kernel/kernel.asm:  uvminit(p->pagetable, initcode, sizeof(initcode));
kernel/kernel.asm:  p->sz = PGSIZE;
kernel/kernel.asm:  p->trapframe->epc = 0;      // user program counter
kernel/kernel.asm:  p->trapframe->sp = PGSIZE;  // user stack pointer
kernel/kernel.asm:  safestrcpy(p->name, "initcode", sizeof(p->name));
kernel/kernel.asm:  p->cwd = namei("/");
kernel/kernel.asm:  p->state = RUNNABLE;
kernel/kernel.asm:  release(&p->lock);
kernel/kernel.asm:  sz = p->sz;
kernel/kernel.asm:    if((sz = uvmalloc(p->pagetable, sz, sz + n)) == 0) {
kernel/kernel.asm:    sz = uvmdealloc(p->pagetable, sz, sz + n);
kernel/kernel.asm:  p->sz = sz;
kernel/kernel.asm:  if(uvmcopy(p->pagetable, np->pagetable, p->sz) < 0){
kernel/kernel.asm:    release(&np->lock);
kernel/kernel.asm:  np->sz = p->sz;
kernel/kernel.asm:  *(np->trapframe) = *(p->trapframe);
kernel/kernel.asm:  np->trapframe->a0 = 0;
kernel/kernel.asm:    if(p->ofile[i])
kernel/kernel.asm:      np->ofile[i] = filedup(p->ofile[i]);
kernel/kernel.asm:  np->cwd = idup(p->cwd);
kernel/kernel.asm:  safestrcpy(np->name, p->name, sizeof(p->name));
kernel/kernel.asm:  pid = np->pid;
kernel/kernel.asm:  release(&np->lock);
kernel/kernel.asm:  np->parent = p;
kernel/kernel.asm:  acquire(&np->lock);
kernel/kernel.asm:  np->state = RUNNABLE;
kernel/kernel.asm:  release(&np->lock);
kernel/kernel.asm:    if(pp->parent == p){
kernel/kernel.asm:      pp->parent = initproc;
kernel/kernel.asm:    if(p->ofile[fd]){
kernel/kernel.asm:      struct file *f = p->ofile[fd];
kernel/kernel.asm:      p->ofile[fd] = 0;
kernel/kernel.asm:    if(p->mmapInfo[fd].length){
kernel/kernel.asm:      struct mmapInfo* mi = &p->mmapInfo[fd];
kernel/kernel.asm:      __munmap(p->pagetable, PGROUNDDOWN(mi->addr), PGROUNDUP(mi->addr + mi->length), mi);
kernel/kernel.asm:  iput(p->cwd);
kernel/kernel.asm:  p->cwd = 0;
kernel/kernel.asm:  wakeup(p->parent);
kernel/kernel.asm:  acquire(&p->lock);
kernel/kernel.asm:  p->xstate = status;
kernel/kernel.asm:  p->state = ZOMBIE;
kernel/kernel.asm:      if(np->parent == p){
kernel/kernel.asm:        acquire(&np->lock);
kernel/kernel.asm:        if(np->state == ZOMBIE){
kernel/kernel.asm:          pid = np->pid;
kernel/kernel.asm:          if(addr != 0 && copyout(p->pagetable, addr, (char *)&np->xstate,
kernel/kernel.asm:                                  sizeof(np->xstate)) < 0) {
kernel/kernel.asm:            release(&np->lock);
kernel/kernel.asm:          release(&np->lock);
kernel/kernel.asm:        release(&np->lock);
kernel/kernel.asm:    if(!havekids || p->killed){
kernel/kernel.asm:      acquire(&p->lock);
kernel/kernel.asm:      if(p->state == RUNNABLE) {
kernel/kernel.asm:        p->state = RUNNING;
kernel/kernel.asm:        swtch(&c->context, &p->context);
kernel/kernel.asm:        // It should have changed its p->state before coming back.
kernel/kernel.asm:      release(&p->lock);
kernel/kernel.asm:  if(!holding(&p->lock))
kernel/kernel.asm:    panic("sched p->lock");
kernel/kernel.asm:  if(p->state == RUNNING)
kernel/kernel.asm:  swtch(&p->context, &mycpu()->context);
kernel/kernel.asm:  acquire(&p->lock);
kernel/kernel.asm:  p->state = RUNNABLE;
kernel/kernel.asm:  release(&p->lock);
kernel/kernel.asm:  // Still holding p->lock from scheduler.
kernel/kernel.asm:  // Once we hold p->lock, we can be
kernel/kernel.asm:  // (wakeup locks p->lock),
kernel/kernel.asm:  acquire(&p->lock);  //DOC: sleeplock1
kernel/kernel.asm:  p->chan = chan;
kernel/kernel.asm:  p->state = SLEEPING;
kernel/kernel.asm:  p->chan = 0;
kernel/kernel.asm:  release(&p->lock);
kernel/kernel.asm:// Must be called without any p->lock.
kernel/kernel.asm:      acquire(&p->lock);
kernel/kernel.asm:      if(p->state == SLEEPING && p->chan == chan) {
kernel/kernel.asm:        p->state = RUNNABLE;
kernel/kernel.asm:      release(&p->lock);
kernel/kernel.asm:    acquire(&p->lock);
kernel/kernel.asm:    if(p->pid == pid){
kernel/kernel.asm:      p->killed = 1;
kernel/kernel.asm:      if(p->state == SLEEPING){
kernel/kernel.asm:        p->state = RUNNABLE;
kernel/kernel.asm:      release(&p->lock);
kernel/kernel.asm:    release(&p->lock);
kernel/kernel.asm:    return copyout(p->pagetable, dst, src, len);
kernel/kernel.asm:    return copyin(p->pagetable, dst, src, len);
kernel/kernel.asm:    if(p->state == UNUSED)
kernel/kernel.asm:    if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
kernel/kernel.asm:      state = states[p->state];
kernel/kernel.asm:    printf("%d %s %s", p->pid, state, p->name);
kernel/kernel.asm:  p->trapframe->epc = r_sepc();
kernel/kernel.asm:    if(p->killed)
kernel/kernel.asm:    p->trapframe->epc += 4;
kernel/kernel.asm:      if(p->mmapInfo[fd].addr <= va && va < p->mmapInfo[fd].addr + p->mmapInfo[fd].length)
kernel/kernel.asm:    // printf("%d: %d %d %d\n", r_stval(), fd, p->mmapInfo[fd].addr, p->mmapInfo[fd].length);
kernel/kernel.asm:      p->killed = 1;
kernel/kernel.asm:      pgMissHandler(p->pagetable, va, &p->mmapInfo[fd]);
kernel/kernel.asm:    printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
kernel/kernel.asm:    p->killed = 1;
kernel/kernel.asm:  if(p->killed)
kernel/kernel.asm:  p->trapframe->kernel_satp = r_satp();         // kernel page table
kernel/kernel.asm:  p->trapframe->kernel_sp = p->kstack + PGSIZE; // process's kernel stack
kernel/kernel.asm:  p->trapframe->kernel_trap = (uint64)usertrap;
kernel/kernel.asm:  p->trapframe->kernel_hartid = r_tp();         // hartid for cpuid()
kernel/kernel.asm:  w_sepc(p->trapframe->epc);
kernel/kernel.asm:  uint64 satp = MAKE_SATP(p->pagetable);
kernel/kernel.asm:  if(addr >= p->sz || addr+sizeof(uint64) > p->sz)
kernel/kernel.asm:  if(copyin(p->pagetable, (char *)ip, addr, sizeof(*ip)) != 0)
kernel/kernel.asm:  int err = copyinstr(p->pagetable, buf, addr, max);
kernel/kernel.asm:    return p->trapframe->a0;
kernel/kernel.asm:    return p->trapframe->a1;
kernel/kernel.asm:    return p->trapframe->a2;
kernel/kernel.asm:    return p->trapframe->a3;
kernel/kernel.asm:    return p->trapframe->a4;
kernel/kernel.asm:    return p->trapframe->a5;
kernel/kernel.asm:  num = p->trapframe->a7;
kernel/kernel.asm:    p->trapframe->a0 = syscalls[num]();
kernel/kernel.asm:            p->pid, p->name, num);
kernel/kernel.asm:    p->trapframe->a0 = -1;
kernel/kernel.asm:  memmove(sb, bp->data, sizeof(*sb));
kernel/kernel.asm:  memset(bp->data, 0, BSIZE);
kernel/kernel.asm:      if((bp->data[bi/8] & m) == 0){  // Is block free?
kernel/kernel.asm:        bp->data[bi/8] |= m;  // Mark block in use.
kernel/kernel.asm:  if((bp->data[bi/8] & m) == 0)
kernel/kernel.asm:  bp->data[bi/8] &= ~m;
kernel/kernel.asm:    dip = (struct dinode*)bp->data + inum%IPB;
kernel/kernel.asm:    if(dip->type == 0){  // a free inode
kernel/kernel.asm:      dip->type = type;
kernel/kernel.asm:// Must be called after every change to an ip->xxx field
kernel/kernel.asm:// Caller must hold ip->lock.
kernel/kernel.asm:  bp = bread(ip->dev, IBLOCK(ip->inum, sb));
kernel/kernel.asm:  dip = (struct dinode*)bp->data + ip->inum%IPB;
kernel/kernel.asm:  dip->type = ip->type;
kernel/kernel.asm:  dip->major = ip->major;
kernel/kernel.asm:  dip->minor = ip->minor;
kernel/kernel.asm:  dip->nlink = ip->nlink;
kernel/kernel.asm:  dip->size = ip->size;
kernel/kernel.asm:  memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
kernel/kernel.asm:    if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
kernel/kernel.asm:      ip->ref++;
kernel/kernel.asm:    if(empty == 0 && ip->ref == 0)    // Remember empty slot.
kernel/kernel.asm:  ip->dev = dev;
kernel/kernel.asm:  ip->inum = inum;
kernel/kernel.asm:  ip->ref = 1;
kernel/kernel.asm:  ip->valid = 0;
kernel/kernel.asm:  ip->ref++;
kernel/kernel.asm:  if(ip == 0 || ip->ref < 1)
kernel/kernel.asm:  acquiresleep(&ip->lock);
kernel/kernel.asm:  if(ip->valid == 0){
kernel/kernel.asm:    bp = bread(ip->dev, IBLOCK(ip->inum, sb));
kernel/kernel.asm:    dip = (struct dinode*)bp->data + ip->inum%IPB;
kernel/kernel.asm:    ip->type = dip->type;
kernel/kernel.asm:    ip->major = dip->major;
kernel/kernel.asm:    ip->minor = dip->minor;
kernel/kernel.asm:    ip->nlink = dip->nlink;
kernel/kernel.asm:    ip->size = dip->size;
kernel/kernel.asm:    memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
kernel/kernel.asm:    ip->valid = 1;
kernel/kernel.asm:    if(ip->type == 0)
kernel/kernel.asm:  if(ip == 0 || !holdingsleep(&ip->lock) || ip->ref < 1)
kernel/kernel.asm:  releasesleep(&ip->lock);
kernel/kernel.asm:  if(ip->ref == 1 && ip->valid && ip->nlink == 0){
kernel/kernel.asm:    // ip->ref == 1 means no other process can have ip locked,
kernel/kernel.asm:    acquiresleep(&ip->lock);
kernel/kernel.asm:    ip->type = 0;
kernel/kernel.asm:    ip->valid = 0;
kernel/kernel.asm:    releasesleep(&ip->lock);
kernel/kernel.asm:  ip->ref--;
kernel/kernel.asm:    if((addr = ip->addrs[bn]) == 0)
kernel/kernel.asm:      ip->addrs[bn] = addr = balloc(ip->dev);
kernel/kernel.asm:    if((addr = ip->addrs[NDIRECT]) == 0)
kernel/kernel.asm:      ip->addrs[NDIRECT] = addr = balloc(ip->dev);
kernel/kernel.asm:    bp = bread(ip->dev, addr);
kernel/kernel.asm:    a = (uint*)bp->data;
kernel/kernel.asm:      a[bn] = addr = balloc(ip->dev);
kernel/kernel.asm:// Caller must hold ip->lock.
kernel/kernel.asm:    if(ip->addrs[i]){
kernel/kernel.asm:      bfree(ip->dev, ip->addrs[i]);
kernel/kernel.asm:      ip->addrs[i] = 0;
kernel/kernel.asm:  if(ip->addrs[NDIRECT]){
kernel/kernel.asm:    bp = bread(ip->dev, ip->addrs[NDIRECT]);
kernel/kernel.asm:    a = (uint*)bp->data;
kernel/kernel.asm:        bfree(ip->dev, a[j]);
kernel/kernel.asm:    bfree(ip->dev, ip->addrs[NDIRECT]);
kernel/kernel.asm:    ip->addrs[NDIRECT] = 0;
kernel/kernel.asm:  ip->size = 0;
kernel/kernel.asm:// Caller must hold ip->lock.
kernel/kernel.asm:  st->dev = ip->dev;
kernel/kernel.asm:  st->ino = ip->inum;
kernel/kernel.asm:  st->type = ip->type;
kernel/kernel.asm:  st->nlink = ip->nlink;
kernel/kernel.asm:  st->size = ip->size;
kernel/kernel.asm:// Caller must hold ip->lock.
kernel/kernel.asm:  if(off > ip->size || off + n < off)
kernel/kernel.asm:  if(off + n > ip->size)
kernel/kernel.asm:    n = ip->size - off;
kernel/kernel.asm:    bp = bread(ip->dev, bmap(ip, off/BSIZE));
kernel/kernel.asm:    if(either_copyout(user_dst, dst, bp->data + (off % BSIZE), m) == -1) {
kernel/kernel.asm:  if(off > ip->size || off + n < off)
kernel/kernel.asm:    bp = bread(ip->dev, bmap(ip, off/BSIZE));
kernel/kernel.asm:    if(either_copyin(bp->data + (off % BSIZE), user_src, src, m) == -1) {
kernel/kernel.asm:  if(off > ip->size)
kernel/kernel.asm:    ip->size = off;
kernel/kernel.asm:  // block to ip->addrs[].
kernel/kernel.asm:  if(dp->type != T_DIR)
kernel/kernel.asm:  for(off = 0; off < dp->size; off += sizeof(de)){
kernel/kernel.asm:      return iget(dp->dev, inum);
kernel/kernel.asm:  for(off = 0; off < dp->size; off += sizeof(de)){
kernel/kernel.asm:  for(off = 0; off < dp->size; off += sizeof(de)){
kernel/kernel.asm:  for(off = 0; off < dp->size; off += sizeof(de)){
kernel/kernel.asm:    if(ip->type != T_DIR){
kernel/kernel.asm://   modify bp->data[]
kernel/kernel.asm:    if(copyout(p->pagetable, addr, (char *)&st, sizeof(st)) < 0)
kernel/kernel.asm:  uint64 oldsz = p->sz;
kernel/kernel.asm:  p->trapframe->a1 = sp;
kernel/kernel.asm:  safestrcpy(p->name, last, sizeof(p->name));
kernel/kernel.asm:  oldpagetable = p->pagetable;
kernel/kernel.asm:  p->pagetable = pagetable;
kernel/kernel.asm:  p->sz = sz;
kernel/kernel.asm:  p->trapframe->epc = elf.entry;  // initial program counter = main
kernel/kernel.asm:  p->trapframe->sp = sp; // initial stack pointer
kernel/kernel.asm:    if(p->ofile[fd] == 0){
kernel/kernel.asm:      p->ofile[fd] = f;
kernel/kernel.asm:  if(ip->type == T_DIR){
kernel/kernel.asm:  ip->nlink++;
kernel/kernel.asm:  if(dp->dev != ip->dev || dirlink(dp, name, ip->inum) < 0){
kernel/kernel.asm:  ip->nlink--;
kernel/kernel.asm:  for(off=2*sizeof(de); off<dp->size; off+=sizeof(de)){
kernel/kernel.asm:  for(off=2*sizeof(de); off<dp->size; off+=sizeof(de)){
kernel/kernel.asm:  if(ip->nlink < 1)
kernel/kernel.asm:  if(ip->type == T_DIR && !isdirempty(ip)){
kernel/kernel.asm:  if(ip->type == T_DIR){
kernel/kernel.asm:    dp->nlink--;
kernel/kernel.asm:  ip->nlink--;
kernel/kernel.asm:    if(type == T_FILE && (ip->type == T_FILE || ip->type == T_DEVICE))
kernel/kernel.asm:  if((ip = ialloc(dp->dev, type)) == 0)
kernel/kernel.asm:  ip->major = major;
kernel/kernel.asm:  ip->minor = minor;
kernel/kernel.asm:  ip->nlink = 1;
kernel/kernel.asm:    dp->nlink++;  // for ".."
kernel/kernel.asm:    // No ip->nlink++ for ".": avoid cyclic ref count.
kernel/kernel.asm:    if(dirlink(ip, ".", ip->inum) < 0 || dirlink(ip, "..", dp->inum) < 0)
kernel/kernel.asm:  if(dirlink(dp, name, ip->inum) < 0)
kernel/kernel.asm:    if(ip->type == T_DIR && omode != O_RDONLY){
kernel/kernel.asm:  if(ip->type == T_DEVICE && (ip->major < 0 || ip->major >= NDEV)){
kernel/kernel.asm:  if(ip->type == T_DEVICE){
kernel/kernel.asm:    f->major = ip->major;
kernel/kernel.asm:  if((omode & O_TRUNC) && ip->type == T_FILE){
kernel/kernel.asm:  if(ip->type != T_DIR){
kernel/kernel.asm:  iput(p->cwd);
kernel/kernel.asm:  p->cwd = ip;
kernel/kernel.asm:      p->ofile[fd0] = 0;
kernel/kernel.asm:  if(copyout(p->pagetable, fdarray, (char*)&fd0, sizeof(fd0)) < 0 ||
kernel/kernel.asm:     copyout(p->pagetable, fdarray+sizeof(fd0), (char *)&fd1, sizeof(fd1)) < 0){
kernel/kernel.asm:  if(copyout(p->pagetable, fdarray, (char*)&fd0, sizeof(fd0)) < 0 ||
kernel/kernel.asm:    p->ofile[fd0] = 0;
kernel/kernel.asm:    p->ofile[fd1] = 0;
kernel/kernel.asm:// called from both the top- and bottom-half.
kernel/log.c://   modify bp->data[]
kernel/memlayout.h://   TRAPFRAME (p->trapframe, used by the trampoline)
kernel/proc.c:// memory model when using p->parent.
kernel/proc.c:// must be acquired before any p->lock.
kernel/proc.c:      initlock(&p->lock, "proc");
kernel/proc.c:      p->kstack = KSTACK((int) (p - proc));
kernel/proc.c:// and return with p->lock held.
kernel/proc.c:    acquire(&p->lock);
kernel/proc.c:    if(p->state == UNUSED) {
kernel/proc.c:      release(&p->lock);
kernel/proc.c:  p->pid = allocpid();
kernel/proc.c:  p->state = USED;
kernel/proc.c:  if((p->trapframe = (struct trapframe *)kalloc()) == 0){
kernel/proc.c:    release(&p->lock);
kernel/proc.c:  p->pagetable = proc_pagetable(p);
kernel/proc.c:  if(p->pagetable == 0){
kernel/proc.c:    release(&p->lock);
kernel/proc.c:  memset(&p->context, 0, sizeof(p->context));
kernel/proc.c:  p->context.ra = (uint64)forkret;
kernel/proc.c:  p->context.sp = p->kstack + PGSIZE;
kernel/proc.c:  memset(p->mmapInfo, 0, sizeof(p->mmapInfo));
kernel/proc.c:// p->lock must be held.
kernel/proc.c:  if(p->trapframe)
kernel/proc.c:    kfree((void*)p->trapframe);
kernel/proc.c:  p->trapframe = 0;
kernel/proc.c:  if(p->pagetable)
kernel/proc.c:    proc_freepagetable(p->pagetable, p->sz);
kernel/proc.c:  p->pagetable = 0;
kernel/proc.c:  p->sz = 0;
kernel/proc.c:  p->pid = 0;
kernel/proc.c:  p->parent = 0;
kernel/proc.c:  p->name[0] = 0;
kernel/proc.c:  p->chan = 0;
kernel/proc.c:  p->killed = 0;
kernel/proc.c:  p->xstate = 0;
kernel/proc.c:  p->state = UNUSED;
kernel/proc.c:  memset(p->mmapInfo, 0, sizeof(p->mmapInfo));
kernel/proc.c:              (uint64)(p->trapframe), PTE_R | PTE_W) < 0){
kernel/proc.c:  uvminit(p->pagetable, initcode, sizeof(initcode));
kernel/proc.c:  p->sz = PGSIZE;
kernel/proc.c:  p->trapframe->epc = 0;      // user program counter
kernel/proc.c:  p->trapframe->sp = PGSIZE;  // user stack pointer
kernel/proc.c:  safestrcpy(p->name, "initcode", sizeof(p->name));
kernel/proc.c:  p->cwd = namei("/");
kernel/proc.c:  p->state = RUNNABLE;
kernel/proc.c:  release(&p->lock);
kernel/proc.c:  sz = p->sz;
kernel/proc.c:    if((sz = uvmalloc(p->pagetable, sz, sz + n)) == 0) {
kernel/proc.c:    sz = uvmdealloc(p->pagetable, sz, sz + n);
kernel/proc.c:  p->sz = sz;
kernel/proc.c:  if(uvmcopy(p->pagetable, np->pagetable, p->sz) < 0){
kernel/proc.c:    release(&np->lock);
kernel/proc.c:  np->sz = p->sz;
kernel/proc.c:  *(np->trapframe) = *(p->trapframe);
kernel/proc.c:  np->trapframe->a0 = 0;
kernel/proc.c:    if(p->ofile[i])
kernel/proc.c:      np->ofile[i] = filedup(p->ofile[i]);
kernel/proc.c:  np->cwd = idup(p->cwd);
kernel/proc.c:  safestrcpy(np->name, p->name, sizeof(p->name));
kernel/proc.c:  pid = np->pid;
kernel/proc.c:  release(&np->lock);
kernel/proc.c:  np->parent = p;
kernel/proc.c:  acquire(&np->lock);
kernel/proc.c:  np->state = RUNNABLE;
kernel/proc.c:  release(&np->lock);
kernel/proc.c:    if(pp->parent == p){
kernel/proc.c:      pp->parent = initproc;
kernel/proc.c:    if(p->ofile[fd]){
kernel/proc.c:      struct file *f = p->ofile[fd];
kernel/proc.c:      p->ofile[fd] = 0;
kernel/proc.c:    if(p->mmapInfo[fd].length){
kernel/proc.c:      struct mmapInfo* mi = &p->mmapInfo[fd];
kernel/proc.c:      __munmap(p->pagetable, PGROUNDDOWN(mi->addr), PGROUNDUP(mi->addr + mi->length), mi);
kernel/proc.c:  iput(p->cwd);
kernel/proc.c:  p->cwd = 0;
kernel/proc.c:  wakeup(p->parent);
kernel/proc.c:  acquire(&p->lock);
kernel/proc.c:  p->xstate = status;
kernel/proc.c:  p->state = ZOMBIE;
kernel/proc.c:      if(np->parent == p){
kernel/proc.c:        acquire(&np->lock);
kernel/proc.c:        if(np->state == ZOMBIE){
kernel/proc.c:          pid = np->pid;
kernel/proc.c:          if(addr != 0 && copyout(p->pagetable, addr, (char *)&np->xstate,
kernel/proc.c:                                  sizeof(np->xstate)) < 0) {
kernel/proc.c:            release(&np->lock);
kernel/proc.c:          release(&np->lock);
kernel/proc.c:        release(&np->lock);
kernel/proc.c:    if(!havekids || p->killed){
kernel/proc.c:      acquire(&p->lock);
kernel/proc.c:      if(p->state == RUNNABLE) {
kernel/proc.c:        p->state = RUNNING;
kernel/proc.c:        swtch(&c->context, &p->context);
kernel/proc.c:        // It should have changed its p->state before coming back.
kernel/proc.c:      release(&p->lock);
kernel/proc.c:// Switch to scheduler.  Must hold only p->lock
kernel/proc.c:  if(!holding(&p->lock))
kernel/proc.c:    panic("sched p->lock");
kernel/proc.c:  if(p->state == RUNNING)
kernel/proc.c:  swtch(&p->context, &mycpu()->context);
kernel/proc.c:  acquire(&p->lock);
kernel/proc.c:  p->state = RUNNABLE;
kernel/proc.c:  release(&p->lock);
kernel/proc.c:  // Still holding p->lock from scheduler.
kernel/proc.c:  // Must acquire p->lock in order to
kernel/proc.c:  // change p->state and then call sched.
kernel/proc.c:  // Once we hold p->lock, we can be
kernel/proc.c:  // (wakeup locks p->lock),
kernel/proc.c:  acquire(&p->lock);  //DOC: sleeplock1
kernel/proc.c:  p->chan = chan;
kernel/proc.c:  p->state = SLEEPING;
kernel/proc.c:  p->chan = 0;
kernel/proc.c:  release(&p->lock);
kernel/proc.c:// Must be called without any p->lock.
kernel/proc.c:      acquire(&p->lock);
kernel/proc.c:      if(p->state == SLEEPING && p->chan == chan) {
kernel/proc.c:        p->state = RUNNABLE;
kernel/proc.c:      release(&p->lock);
kernel/proc.c:    acquire(&p->lock);
kernel/proc.c:    if(p->pid == pid){
kernel/proc.c:      p->killed = 1;
kernel/proc.c:      if(p->state == SLEEPING){
kernel/proc.c:        p->state = RUNNABLE;
kernel/proc.c:      release(&p->lock);
kernel/proc.c:    release(&p->lock);
kernel/proc.c:    return copyout(p->pagetable, dst, src, len);
kernel/proc.c:    return copyin(p->pagetable, dst, src, len);
kernel/proc.c:    if(p->state == UNUSED)
kernel/proc.c:    if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
kernel/proc.c:      state = states[p->state];
kernel/proc.c:    printf("%d %s %s", p->pid, state, p->name);
kernel/proc.h:  // p->lock must be held when using these:
kernel/proc.h:  // these are private to the process, so p->lock need not be held.
kernel/riscv.h:// Supervisor Trap-Vector Base Address
kernel/syscall.c:  if(addr >= p->sz || addr+sizeof(uint64) > p->sz)
kernel/syscall.c:  if(copyin(p->pagetable, (char *)ip, addr, sizeof(*ip)) != 0)
kernel/syscall.c:  int err = copyinstr(p->pagetable, buf, addr, max);
kernel/syscall.c:    return p->trapframe->a0;
kernel/syscall.c:    return p->trapframe->a1;
kernel/syscall.c:    return p->trapframe->a2;
kernel/syscall.c:    return p->trapframe->a3;
kernel/syscall.c:    return p->trapframe->a4;
kernel/syscall.c:    return p->trapframe->a5;
kernel/syscall.c:  num = p->trapframe->a7;
kernel/syscall.c:    p->trapframe->a0 = syscalls[num]();
kernel/syscall.c:            p->pid, p->name, num);
kernel/syscall.c:    p->trapframe->a0 = -1;
kernel/sysfile.c:    if(p->ofile[fd] == 0){
kernel/sysfile.c:      p->ofile[fd] = f;
kernel/sysfile.c:  if(ip->type == T_DIR){
kernel/sysfile.c:  ip->nlink++;
kernel/sysfile.c:  if(dp->dev != ip->dev || dirlink(dp, name, ip->inum) < 0){
kernel/sysfile.c:  ip->nlink--;
kernel/sysfile.c:  for(off=2*sizeof(de); off<dp->size; off+=sizeof(de)){
kernel/sysfile.c:  if(ip->nlink < 1)
kernel/sysfile.c:  if(ip->type == T_DIR && !isdirempty(ip)){
kernel/sysfile.c:  if(ip->type == T_DIR){
kernel/sysfile.c:    dp->nlink--;
kernel/sysfile.c:  ip->nlink--;
kernel/sysfile.c:    if(type == T_FILE && (ip->type == T_FILE || ip->type == T_DEVICE))
kernel/sysfile.c:  if((ip = ialloc(dp->dev, type)) == 0)
kernel/sysfile.c:  ip->major = major;
kernel/sysfile.c:  ip->minor = minor;
kernel/sysfile.c:  ip->nlink = 1;
kernel/sysfile.c:    dp->nlink++;  // for ".."
kernel/sysfile.c:    // No ip->nlink++ for ".": avoid cyclic ref count.
kernel/sysfile.c:    if(dirlink(ip, ".", ip->inum) < 0 || dirlink(ip, "..", dp->inum) < 0)
kernel/sysfile.c:  if(dirlink(dp, name, ip->inum) < 0)
kernel/sysfile.c:    if(ip->type == T_DIR && omode != O_RDONLY){
kernel/sysfile.c:  if(ip->type == T_DEVICE && (ip->major < 0 || ip->major >= NDEV)){
kernel/sysfile.c:  if(ip->type == T_DEVICE){
kernel/sysfile.c:    f->major = ip->major;
kernel/sysfile.c:  if((omode & O_TRUNC) && ip->type == T_FILE){
kernel/sysfile.c:  if(ip->type != T_DIR){
kernel/sysfile.c:  iput(p->cwd);
kernel/sysfile.c:  p->cwd = ip;
kernel/sysfile.c:      p->ofile[fd0] = 0;
kernel/sysfile.c:  if(copyout(p->pagetable, fdarray, (char*)&fd0, sizeof(fd0)) < 0 ||
kernel/sysfile.c:     copyout(p->pagetable, fdarray+sizeof(fd0), (char *)&fd1, sizeof(fd1)) < 0){
kernel/sysfile.c:    p->ofile[fd0] = 0;
kernel/sysfile.c:    p->ofile[fd1] = 0;
kernel/trampoline.S:        # sscratch points to where the process's p->trapframe is
kernel/trampoline.S:	# save the user a0 in p->trapframe->a0
kernel/trampoline.S:        # restore kernel stack pointer from p->trapframe->kernel_sp
kernel/trampoline.S:        # make tp hold the current hartid, from p->trapframe->kernel_hartid
kernel/trampoline.S:        # load the address of usertrap(), p->trapframe->kernel_trap
kernel/trampoline.S:        # restore kernel page table from p->trapframe->kernel_satp
kernel/trampoline.S:        # table does not specially map p->tf.
kernel/trap.c:  p->trapframe->epc = r_sepc();
kernel/trap.c:    if(p->killed)
kernel/trap.c:    p->trapframe->epc += 4;
kernel/trap.c:      if(p->mmapInfo[fd].addr <= va && va < p->mmapInfo[fd].addr + p->mmapInfo[fd].length)
kernel/trap.c:    // printf("%d: %d %d %d\n", r_stval(), fd, p->mmapInfo[fd].addr, p->mmapInfo[fd].length);
kernel/trap.c:      p->killed = 1;
kernel/trap.c:      pgMissHandler(p->pagetable, va, &p->mmapInfo[fd]);
kernel/trap.c:    printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
kernel/trap.c:    p->killed = 1;
kernel/trap.c:  if(p->killed)
kernel/trap.c:  p->trapframe->kernel_satp = r_satp();         // kernel page table
kernel/trap.c:  p->trapframe->kernel_sp = p->kstack + PGSIZE; // process's kernel stack
kernel/trap.c:  p->trapframe->kernel_trap = (uint64)usertrap;
kernel/trap.c:  p->trapframe->kernel_hartid = r_tp();         // hartid for cpuid()
kernel/trap.c:  w_sepc(p->trapframe->epc);
kernel/trap.c:  uint64 satp = MAKE_SATP(p->pagetable);
kernel/uart.c:// called from both the top- and bottom-half.
kernel/vm.c:  ilock(fp->ip);
kernel/vm.c:  if((tot = readi(fp->ip, 0, (uint64)mem, PGROUNDDOWN(va) - mi->addr, PGSIZE)) < 0)
kernel/vm.c:  iunlock(fp->ip);
kernel/vm.c:  pagetable = p->pagetable;
kernel/vm.c:  for(int i = 0; i < NOFILE; i++) if(p->mmapInfo[i].length == 0){
kernel/vm.c:    mi = &p->mmapInfo[i];
kernel/vm.c:  mi->fp = p->ofile[fd];
kernel/vm.c:  if(!mi->fp->readable && prot & PROT_READ)
kernel/vm.c:  if(!mi->fp->writable && prot & PROT_WRITE && mi->flags & MAP_SHARED)
kernel/vm.c:  oldsz = PGROUNDUP(p->sz);
kernel/vm.c:  p->sz = oldsz + length;
kernel/vm.c:  filedup(p->ofile[fd]);
kernel/vm.c:      if(write_back(mi->fp->ip, va, va - mi->addr + mi->offset) < 0)
kernel/vm.c:  pagetable = p->pagetable;
kernel/vm.c:    if(p->mmapInfo[i].addr <= addr && addr < p->mmapInfo[i].addr + p->mmapInfo[i].length){
kernel/vm.c:  mi = &p->mmapInfo[fd];
kernel/vm.c:    if(p->sz != mi->addr + mi->length)
